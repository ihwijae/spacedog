package com.spacedog.mock;

import com.spacedog.file.domain.FileData;
import com.spacedog.file.repository.FileRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeFileRepository implements FileRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private List<FileData> data = new ArrayList<>();

    @Override
    public FileData save(FileData fileData) {

        if(fileData.getId() == null || fileData.getId() == 0) {
            FileData newFile = FileData.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .storeFilename(fileData.getStoreFilename())
                    .uploadFilename(fileData.getUploadFilename())
                    .build();

            data.add(newFile);
            return newFile;
        } else {
            data.removeIf(f -> Objects.equals(f.getId(), fileData.getId()));
            data.add(fileData);
            return fileData;
        }
    }

    @Override
    public Optional<FileData> findById(Long id) {
        return data.stream()
                .filter(f -> f.getId().equals(id))
                .findAny();
    }
}
